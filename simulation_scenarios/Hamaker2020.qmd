---
title: "Hamaker en Muthen (2020)"
author: "Ward B. Eiling"
format: 
  html:
    self-contained: true
execute:
  warning: false
  message: false
---

## Continuous X and Y

```{r}
#| message: false
#| warning: false
#| error: false

######################################
#### SIMULATE DATA WITH DIFFERENT ####
###### WITHIN AND BETWEEN SLOPES #####
######################################

rm(list=ls())
library(lme4)
library(gee)
library(geepack)
library(tidyverse)
set.seed(3859)

# Create function to simulate data
dgm_continuousxy <- function(N = 5000, 
                             n = 20, 
                             sd.u0 = 1,
                             sd.u1 = 0
                             ){
  
  # N<-5000	# number of clusters		
  # n<-20		# number of observations within a cluster, originally set to 4. 
  # # If set to 20, GEE with AR(1) approximates the other models better.
  
  Y <- matrix(,N,n)	# to store the outcome
  X <- matrix(,N,n)	# to store the predictor
  X.TrueCent <- matrix(,N,n) # to store the true centered predictor
   
  
  ########################
  #### SET PARAMETER VALUES ####
  ########################
  
  # PREDICTOR
  sdX.within <- sqrt(1)		# within-person variance 
  sdX.between <- sqrt(4)	# between-person variance
  # if set to zero, the marginal effect will become approximately equal to the conditional effect.
  
  # INTERCEPT LEVEL 2
  g.00 <- 0			# Grand intercept
  g.01 <- 2			# between-cluster slope
  # sd.u0 <- 1			# SD of residuals intercept at level 2
  
  # SLOPE LEVEL 2
  g.10 <- 1			# fixed within-cluster slope
  # sd.u1 <- 1			# SD of within-cluster slope at level 2
  
  # RESIDUALS AT LEVEL 1
  sd.e <- 1			# residual SD at level 1
  
  #######################
  #### SIMULATE DATA ####
  #######################
  
  for (j in 1:N){	
    # sample mean on x in cluster j
    X.mean.j <- rnorm(1,mean=0,sd=sdX.between)
    # sample x in cluster j
  	X.j <- rnorm(n,mean=X.mean.j,sd=sdX.within)
    X[j,] <- X.j
  	# sample slope in cluster j (here identical across individuals)
  	b1.j <- g.10 + rnorm(1,0,sd.u1)
    # sample intercept in cluster j (level 2 expression)
  	b0.j <- g.00 + g.01*X.mean.j + rnorm(1,0,sd.u0)
  	# sample y (level 1 expression)
  	Y[j,] <- b0.j + b1.j*(X.j-X.mean.j) + rnorm(n,0,sd.e)	
  }
  
  ########################
  ### DATA PREPARATION ###
  ########################
  
  Y <- c(t(Y))
  X <- c(t(X))
  Cluster <- rep(1:N, each=n)
  Time <- rep(1:n,N)
  				
  #####################################
  ### ESTIMATE SAMPLE CLUSTER MEANS ###
  ###### AND CENTER X WITH THIS #######
  #####################################
  
  cluster.means <- ave(X, Cluster, FUN=mean)
  
  X.cent <- X - cluster.means
  data.cent <- as.data.frame(cbind(Y, X.cent,X, Cluster, cluster.means))
  
  ########################
  ### ESTIMATE MODELS ####
  ########################

  # L1: RAW X (RE MODEL)
  l1 <- summary(lmer(Y ~ X + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
  g.indep1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "independence"))
  g.exch1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "exchangeable"))
  g.ar1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))
  
  # L2: CENTERED X (FE MODEL)
  l2 <- summary(lmer(Y ~ X.cent + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
  g.indep2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "independence"))
  g.exch2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "exchangeable"))
  g.ar2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))
  
  # L3a: CENTERED X PLUS SAMPLE MEANS ON X (WITHIN-BETWEEN MODEL)
  l3a <- summary(lmer(Y ~ X.cent + cluster.means + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
  g.indep3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "independence"))
  g.exch3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "exchangeable"))
  g.ar3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))
  
  # L4: RAW X PLUS SAMPLE MEANS ON X (MUNDLAK'S CONTEXTUAL MODEL)
  l4 <- summary(lmer(Y ~ X + cluster.means + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
  g.indep4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "independence"))
  g.exch4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "exchangeable"))
  g.ar4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))
  
  # store all models in a list
  all_models <- list(l1, g.indep1, g.exch1, g.ar1, l2, g.indep2, g.exch2, g.ar2, l3a, g.indep3a, g.exch3a, g.ar3a, l4, g.indep4, g.exch4, g.ar4)
  
  ####################
  ### CREATE TABLE ###
  ####################
  
  # create table with appropriate column names
  table <- matrix(data = NA, nrow = 16, ncol = 3, dimnames = list(c("L1", "GEE.indep1", "GEE.exch1", "GEE.ar1",
                                                                  "L2", "GEE.indep2", "GEE.exch2", "GEE.ar2",
                                                                  "L3a", "GEE.indep3a", "GEE.exch3a", "GEE.ar3a",
                                                                  "L4", "GEE.indep4", "GEE.exch4", "GEE.ar4"),
                                                                  c("X", "X.cent", "cluster.means")))
  
  # fil table with estimates assigning to the correct row and column
  for (i in 1:16){
    # check coefficients in the model
    names <- names(all_models[[i]])
    if ("X" %in% names){
      table[i,1] <- all_models[[i]]["X"]
    }
    if ("X.cent" %in% names){
      table[i,2] <- all_models[[i]]["X.cent"]
    }
    if ("cluster.means" %in% names){
      table[i,3] <- all_models[[i]]["cluster.means"]
    }
  }
  
  table
}
```

```{r}
#| message: false
#| warning: false
#| error: false

# run function with only random intercept
continuousxy_random_intercept <- dgm_continuousxy(N = 5000, n = 20, sd.u0 = 1, sd.u1 = 0)
# run function with also random slope
continuousxy_random_intercept_slope <- dgm_continuousxy(N = 5000, n = 20, sd.u0 = 1, sd.u1 = 1)
```

```{r}
# run each function for 100 replications
results_no_random_slope <- replicate(100, dgm_continuousxy(N = 5000, n = 20, sd.u0 = 1, sd.u1 = 0), simplify = FALSE)

# compute the mean of the estimates
results_no_random_slope_mean <- apply(simplify2array(results_no_random_slope), c(1,2), mean)
```


We applied GEE models with different centering approaches in situations with a single predictor at level 1 and a continuous outcome variable. 

For models 1 with raw X, we can see that the GEE-exchangeability yields comparable coefficients to the MLM model, whereas the GEE-independence and GEE-AR1 both yield different results, which inspires the question of what these are. According to Qian et al. (2020), this would be the marginal effect. The pattern is as follows:

$$\text{MLM} \approx \text{GEE-exch} < \text{GEE-AR1} < \text{GEE-indep}$$

This indicates that we obtain something different to the "uninterpretable blend" of within- and between-cluster effects in the GEE-independence and GEE-AR1 models.

For models 2 (with centered X),  model 3a (with centered X plus sample means on X) and model 4 (with raw X plus sample means on X), we see the same pattern: 

$$\text{MLM} = \text{GEE-indep} = \text{GEE-exch} \neq \text{GEE-AR1}$$
Specifically, in models 2 and 3a, the centered predictor has a greater coefficient for the GEE-AR1 model; in model 4, the raw predictor has a greater coefficient for the GEE-AR1 model; in model 3 the cluster mean has a greater coefficient for the GEE-AR1 model; in model 4 the cluster mean has a smaller coefficient for the GEE-AR1 model.

## Discrete X and Continuous Y

Here, we implement a binary predictor X at level 1, with between-person differences. Alternatively, we could also choose to exclude any between-person differences, which may more accurately reflect the situation of randomized assignment of treatment (e.g., in MRT framework).

```{r}
######################################
#### SIMULATE DATA WITH DIFFERENT ####
###### WITHIN AND BETWEEN SLOPES #####
######################################

rm(list=ls())
library(lme4)
library(gee)
library(geepack)
library(tidyverse)
set.seed(3859)

N<-5000	# number of clusters		
n<-20		# number of observations within a cluster

Y <- matrix(,N,n)	# to store the outcome
X <- matrix(,N,n)	# to store the predictor
X.TrueCent <- matrix(,N,n) # to store the true centered predictor
 

########################
#### SET PARAMETER VALUES ####
########################

# PREDICTOR
# sdX.within <- sqrt(1)		# within-person variance, irrelevant for discrete X
sdX.between <- sqrt(0.4)	# between-person variance

# INTERCEPT LEVEL 2
g.00 <- 0			# Grand intercept
g.01 <- 2			# between-cluster slope
sd.u0 <- 1			# SD of residuals intercept at level 2

# SLOPE LEVEL 2
g.10 <- 1			# fixed within-cluster slope
sd.u1 <- 1			# SD of within-cluster slope at level 2

# RESIDUALS AT LEVEL 1
sd.e <- 1			# residual SD at level 1

#######################
#### SIMULATE DATA ####
#######################

for (j in 1:N){	
  # Sample mean on x in cluster j
  X.mean.j <- rnorm(1, mean=0, sd=sdX.between)
    
  # Sample binary X in cluster j (probability depends on cluster mean)
  p <- plogis(X.mean.j)  # Convert X.mean.j to probability using logistic function
  X.j <- rbinom(n, 1, p) 
  X[j,] <- X.j
  
#   ### OLD CODE
#   # sample mean on x in cluster j
#   X.mean.j <- rnorm(1,mean=0,sd=sdX.between)
#   # sample x in cluster j
# 	X.j <- rnorm(n,mean=X.mean.j,sd=sdX.within)
#   X[j,] <- X.j
  
	# sample slope in cluster j (here identical across individuals)
	b1.j <- g.10 + rnorm(1,0,sd.u1)
  # sample intercept in cluster j (level 2 expression)
	b0.j <- g.00 + g.01*X.mean.j + rnorm(1,0,sd.u0)
	# sample y (level 1 expression)
	Y[j,] <- b0.j + b1.j*(X.j-X.mean.j) + rnorm(n,0,sd.e)	
}

########################
### DATA PREPARATION ###
########################

Y <- c(t(Y))
X <- c(t(X))
Cluster <- rep(1:N, each=n)
Time <- rep(1:n,N)
				
#####################################
### ESTIMATE SAMPLE CLUSTER MEANS ###
###### AND CENTER X WITH THIS #######
#####################################

cluster.means <- ave(X, Cluster, FUN=mean)

X.cent <- X - cluster.means
data.cent <- as.data.frame(cbind(Y, X.cent,X, Cluster, cluster.means))

########################
### ESTIMATE MODELS ####
########################

# L1: RAW X (RE MODEL)
l1 <- summary(lmer(Y ~ X + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
g.indep1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "independence"))
g.exch1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "exchangeable"))
g.ar1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))

# L2: CENTERED X (FE MODEL)
l2 <- summary(lmer(Y ~ X.cent + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
g.indep2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "independence"))
g.exch2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "exchangeable"))
g.ar2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))

# L3a: CENTERED X PLUS SAMPLE MEANS ON X (WITHIN-BETWEEN MODEL)
l3a <- summary(lmer(Y ~ X.cent + cluster.means + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
g.indep3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "independence"))
g.exch3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "exchangeable"))
g.ar3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))

# L4: RAW X PLUS SAMPLE MEANS ON X (MUNDLAK'S CONTEXTUAL MODEL)
l4 <- summary(lmer(Y ~ X + cluster.means + (1 |Cluster), data = data.cent, REML = F))$coefficients[,1]
g.indep4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "independence"))
g.exch4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "exchangeable"))
g.ar4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1))

# store all models in a list
all_models <- list(l1, g.indep1, g.exch1, g.ar1, l2, g.indep2, g.exch2, g.ar2, l3a, g.indep3a, g.exch3a, g.ar3a, l4, g.indep4, g.exch4, g.ar4)

####################
### CREATE TABLE ###
####################

# create table with appropriate column names
table <- matrix(data = NA, nrow = 16, ncol = 3, dimnames = list(c("L1", "GEE.indep1", "GEE.exch1", "GEE.ar1",
                                                                "L2", "GEE.indep2", "GEE.exch2", "GEE.ar2",
                                                                "L3a", "GEE.indep3a", "GEE.exch3a", "GEE.ar3a",
                                                                "L4", "GEE.indep4", "GEE.exch4", "GEE.ar4"),
                                                                c("X", "X.cent", "cluster.means")))

# fil table with estimates assigning to the correct row and column
for (i in 1:16){
  # check coefficients in the model
  names <- names(all_models[[i]])
  if ("X" %in% names){
    table[i,1] <- all_models[[i]]["X"]
  }
  if ("X.cent" %in% names){
    table[i,2] <- all_models[[i]]["X.cent"]
  }
  if ("cluster.means" %in% names){
    table[i,3] <- all_models[[i]]["cluster.means"]
  }
}

table
```

## Discrete X and Y

```{r}
######################################
#### SIMULATE DATA WITH DIFFERENT ####
###### WITHIN AND BETWEEN SLOPES #####
######################################

rm(list=ls())
library(lme4)
library(gee)
library(geepack)
library(tidyverse)
set.seed(3859)

N<-5000	# number of clusters		
n<-20		# number of observations within a cluster

Y <- matrix(,N,n)	# to store the outcome
X <- matrix(,N,n)	# to store the predictor
X.TrueCent <- matrix(,N,n) # to store the true centered predictor
 

########################
#### SET PARAMETER VALUES ####
########################

# PREDICTOR
# sdX.within <- sqrt(1)		# within-person variance, irrelevant for discrete X
sdX.between <- sqrt(0.4)	# between-person variance

# INTERCEPT LEVEL 2
g.00 <- 0			# Grand intercept
g.01 <- 2			# between-cluster slope
sd.u0 <- 1			# SD of residuals intercept at level 2

# SLOPE LEVEL 2
g.10 <- 1			# fixed within-cluster slope
sd.u1 <- 0			# SD of within-cluster slope at level 2

# RESIDUALS AT LEVEL 1
# sd.e <- 1			# residual SD at level 1, irrelevant for binary Y

#######################
#### SIMULATE DATA ####
#######################

for (j in 1:N){	
  # Sample mean on x in cluster j
  X.mean.j <- rnorm(1, mean=0, sd=sdX.between)
    
  # Sample binary X in cluster j (probability depends on cluster mean)
  p <- plogis(X.mean.j)  # Convert X.mean.j to probability using logistic function
  X.j <- rbinom(n, 1, p) 
  X[j,] <- X.j
  
#   ### OLD CODE
#   # sample mean on x in cluster j
#   X.mean.j <- rnorm(1,mean=0,sd=sdX.between)
#   # sample x in cluster j
# 	X.j <- rnorm(n,mean=X.mean.j,sd=sdX.within)
#   X[j,] <- X.j
  
	# sample slope in cluster j (here identical across individuals)
	b1.j <- g.10 + rnorm(1,0,sd.u1)
  # sample intercept in cluster j (level 2 expression)
	b0.j <- g.00 + g.01*X.mean.j + rnorm(1,0,sd.u0)
	
	# sample y (level 1 expression) using logistic model
  eta <- b0.j + b1.j * (X.j - X.mean.j)  # Linear predictor
  p.y <- plogis(eta)  # Convert to probability using logistic function
  Y[j,] <- rbinom(n, 1, p.y)  # Sample from Bernoulli distribution
  
#   ### OLD CODE
#   # sample y (level 1 expression)
# 	Y[j,] <- b0.j + b1.j*(X.j-X.mean.j) + rnorm(n,0,sd.e)	
}

########################
### DATA PREPARATION ###
########################

Y <- c(t(Y))
X <- c(t(X))
Cluster <- rep(1:N, each=n)
Time <- rep(1:n,N)
				
#####################################
### ESTIMATE SAMPLE CLUSTER MEANS ###
###### AND CENTER X WITH THIS #######
#####################################

cluster.means <- ave(X, Cluster, FUN=mean)

X.cent <- X - cluster.means
data.cent <- as.data.frame(cbind(Y, X.cent,X, Cluster, cluster.means))

########################
### ESTIMATE MODELS ####
########################

# L1: RAW X (RE MODEL)
l1 <- summary(glmer(Y ~ X + (1 |Cluster), data = data.cent, family = binomial(link = "logit")))$coefficients[,1]
g.indep1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "independence", family = binomial(link = "logit")))
g.exch1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "exchangeable", family = binomial(link = "logit")))
g.ar1 <- coef(gee(Y ~ X, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1, family = binomial(link = "logit")))

# L2: CENTERED X (FE MODEL)
l2 <- summary(glmer(Y ~ X.cent + (1 |Cluster), data = data.cent, family = binomial(link = "logit")))$coefficients[,1]
g.indep2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "independence", family = binomial(link = "logit")))
g.exch2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "exchangeable", family = binomial(link = "logit")))
g.ar2 <- coef(gee(Y ~ X.cent, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1, family = binomial(link = "logit")))

# L3a: CENTERED X PLUS SAMPLE MEANS ON X (WITHIN-BETWEEN MODEL)
l3a <- summary(glmer(Y ~ X.cent + cluster.means + (1 |Cluster), data = data.cent, family = binomial(link = "logit")))$coefficients[,1]
g.indep3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "independence", family = binomial(link = "logit")))
g.exch3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "exchangeable", family = binomial(link = "logit")))
g.ar3a <- coef(gee(Y ~ X.cent + cluster.means, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1, family = binomial(link = "logit")))

# L4: RAW X PLUS SAMPLE MEANS ON X (MUNDLAK'S CONTEXTUAL MODEL)
l4 <- summary(glmer(Y ~ X + cluster.means + (1 |Cluster), data = data.cent, family = binomial(link = "logit")))$coefficients[,1]
g.indep4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "independence", family = binomial(link = "logit")))
g.exch4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "exchangeable", family = binomial(link = "logit")))
g.ar4 <- coef(gee(Y ~ X + cluster.means, id = Cluster, data = data.cent, corstr = "AR-M", Mv = 1, family = binomial(link = "logit")))

# store all models in a list
all_models <- list(l1, g.indep1, g.exch1, g.ar1, l2, g.indep2, g.exch2, g.ar2, l3a, g.indep3a, g.exch3a, g.ar3a, l4, g.indep4, g.exch4, g.ar4)

####################
### CREATE TABLE ###
####################

# create table with appropriate column names
table <- matrix(data = NA, nrow = 16, ncol = 3, dimnames = list(c("L1", "GEE.indep1", "GEE.exch1", "GEE.ar1",
                                                                "L2", "GEE.indep2", "GEE.exch2", "GEE.ar2",
                                                                "L3a", "GEE.indep3a", "GEE.exch3a", "GEE.ar3a",
                                                                "L4", "GEE.indep4", "GEE.exch4", "GEE.ar4"),
                                                                c("X", "X.cent", "cluster.means")))

# fil table with estimates assigning to the correct row and column
for (i in 1:16){
  # check coefficients in the model
  names <- names(all_models[[i]])
  if ("X" %in% names){
    table[i,1] <- all_models[[i]]["X"]
  }
  if ("X.cent" %in% names){
    table[i,2] <- all_models[[i]]["X.cent"]
  }
  if ("cluster.means" %in% names){
    table[i,3] <- all_models[[i]]["cluster.means"]
  }
}

table
```